Алгоритм движения по прямой в дискретном пространстве

Попробую объяснить доходчиво, что такое алгоритм Брезенхема и откуда он получается: :)

Для ясности упростим формулу до вида y=x*(Y/X), где линия рисуется из точки 0,0 в точку X,Y, x - текущий, для которого хотим посчитать y. Также предположим, что Y<X (т.е. линия под углом менее 45% к горизонтальной оси) и что X>0, Y>0.

Подумаем, что происходит с формулой, когда x увеличивается от 0 до X c шагом 1. Сначала x=1 и (x*Y)/X=0, потому что x*Y=1*Y<X. Потом x=2,3,4... etc, пока x*Y не станет больше X. Аналогично y станет 2, когда x*Y станет больше 2*X.

Теперь прикинем - если x увеличивается с шагом 1, зачем умножение? Выкидываем, вводим переменную d, к которой прибавляем Y. d=d+Y; y=d/X.

Выкидываем и деление - заметив, что как только d станет больше X, можно инкрементировать y на 1. А что делать при этом с d? А очень просто - вычесть из него X! =) Таким образом d у нас всегда есть остаток от деления x*Y на X. И как только этот остаток становится больше X, мы понимаем, что результат деления увеличился на 1 и надо увеличить y. А остаток корректируем, вычитая X.

Вот собственно и образовался алгоритм Брезенхема.

init: d=0; x=0; y=0;

loop: x=x+1;
d=d+Y;
if(d>=X) {d=d-X; y=y+1;}
setpoint(x,y);
go to loop

Обратите внимание, что он в таком виде применим только когда X>Y.
При рисовании линии обычно делят всё множество направлений на 4 кусочка, в каждом из которых либо X>Y, либо Y>X.
Для улучшения формы линии надо подставить начальное значение d=X/2 в целом виде отбрасывая остаток( т.е. просто сдвинуть X вправо на один разряд)
